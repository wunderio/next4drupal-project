name: next4drupal-project
recipe: drupal9

config:
  php: "8.1"
  via: nginx
  webroot: drupal/web
  database: "mariadb:10.3"
  composer_version: 2
  xdebug: off
  config:
    php: .lando/php.ini

tooling:
  grumphp:
    description: "Runs grumphp commands"
    cmd:
      - appserver: ./drupal/vendor/bin/grumphp

  npm:
    description: "Runs npm commands"
    service: node
    dir: /app/next

  composer:
    dir: /app/drupal

  drush:
    cmd: /app/drupal/vendor/bin/drush

  phpunit:
    description: Runs PHPUnit commands
    user: www-data
    cmd:
      - appserver: "php /app/drupal/vendor/bin/phpunit -c /app/drupal/phpunit.xml --testdox"
  regenerate-phpunit-config:
    description: "Regenerates fresh PHPUnit configuration."
    cmd:
      - appserver: /app/.lando/phpunit.sh
  xdebug:
    description: "Loads Xdebug in the selected mode"
    cmd:
      - appserver: /app/.lando/xdebug.sh
    user: root

  install-recipe:
    description: 'Installs the specified recipe. Accepts the recipe folder name. Recipes should be stored in /recipes'
    cmd:
      - appserver: /app/.lando/install_recipe.sh
    dir: /app/drupal/web
    user: www-data

  generate-oauth-keys:
    description: 'Generates a pair of public and private keys into the oauth directory'
    cmd:
      - appserver: /app/.lando/generate_oauth_keys.sh
    dir: /app/drupal/oauth
    user: www-data

services:
  database:
    # User random static high port for database connection.
    portforward: 34567
  appserver:
    # Install dependencies when building lando.
    build:
      - "cd drupal && composer install"
      - echo "export PATH=/app/drupal/vendor/bin:${PATH}" >> /var/www/.bashrc
    overrides:
      environment:
        # URL OF THE FRONTEND SITE:
        # This needs to match the proxy value for the node service
        # so if you change it, remember to change it here as well.
        WUNDER_NEXT_FRONTEND_URL: https://frontend.lndo.site
        # This same var is set in the node service below, the value should match.
        # This is only used in local development so it can be a not secure value:
        DRUPAL_REVALIDATE_SECRET: mysecret
        HASH_SALT: notsosecurehashnotsosecurehashnotsosecurehash
        ENVIRONMENT_NAME: lando
        DB_NAME_DRUPAL: drupal9
        DB_USER_DRUPAL: drupal9
        DB_PASS_DRUPAL: drupal9
        DB_HOST_DRUPAL: database
        DRUSH_OPTIONS_URI: https://next4drupal-project.lndo.site
        # Support debugging with XDEBUG 3.
        XDEBUG_MODE:
        PHP_IDE_CONFIG: serverName=appserver
        # PHPUnit settings. @see: .lando/phpunit.sh
        MINK_DRIVER_ARGS_WEBDRIVER: '["chrome", {"browserName":"chrome","chromeOptions":{"args":["--disable-gpu","--headless"]}}, "http://chrome:9515"]'
  node:
    type: node:16
    ssl: true
    sslExpose: true
    overrides:
      ports:
        - "3000:3000"
      environment:
        # This same var is set in the appserver service above, the value should match.
        # This is only used in local development so it can be a not secure value:
        DRUPAL_REVALIDATE_SECRET: mysecret
    build:
      - "cd next && npm install"
    scanner: false
  chrome:
    type: compose
    services:
      image: drupalci/webdriver-chromedriver:production
      command: chromedriver --log-path=/tmp/chromedriver.log --verbose --whitelisted-ips=
  elasticsearch:
   type: compose
   services:
     image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.0"
     command: "/bin/tini -- /usr/local/bin/docker-entrypoint.sh eswrapper"
     user: elasticsearch
     environment:
       ES_JAVA_OPTS: "-Xms512m -Xmx512m"
       discovery.type: "single-node"
       bootstrap.memory_lock: "true"
       # Allow CORS requests.
       http.cors.enabled: "true"
       http.cors.allow-origin: "*"
     ulimits:
       memlock:
         soft: "-1"
         hard: "-1"
     ports:
       - "9200:9200"
     volumes:
       - esdata:/usr/share/elasticsearch/data
   # Install ES plugins.
   build_as_root:
     - elasticsearch-plugin install analysis-icu analysis-ukrainian
   volumes:
     esdata:
       driver: local
  kibana:
   type: compose
   services:
     image: "docker.elastic.co/kibana/kibana:7.17.0"
     command: "/bin/tini -- /usr/local/bin/kibana-docker"
     user: kibana
     ports:
       - "5601:5601"
  mailhog:
    type: mailhog
    hogfrom:
      - appserver

proxy:
  mailhog:
    - mail.lndo.site
  elasticsearch:
    - elasticsearch.lndo.site:9200
  kibana:
    - kibana.lndo.site:5601
  node:
  # This value is used by the appserver service to connect to the frontend
  # so make sure that this value and the WUNDER_NEXT_FRONTEND_URL env var are
  # in sync.
    - frontend.lndo.site:3000

events:
  post-db-import:
    - appserver: "cd $LANDO_WEBROOT && drush cache:rebuild -y && drush @local user:login"

env_file:
  - .lando/.env

# Tested with Lando version
version: v3.6.1
